// Code generated by MockGen. DO NOT EDIT.
// Source: review.go
//
// Generated by this command:
//
//	mockgen -source=review.go -destination=../mocks/review.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "ppo/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIReviewRepository is a mock of IReviewRepository interface.
type MockIReviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIReviewRepositoryMockRecorder
}

// MockIReviewRepositoryMockRecorder is the mock recorder for MockIReviewRepository.
type MockIReviewRepositoryMockRecorder struct {
	mock *MockIReviewRepository
}

// NewMockIReviewRepository creates a new mock instance.
func NewMockIReviewRepository(ctrl *gomock.Controller) *MockIReviewRepository {
	mock := &MockIReviewRepository{ctrl: ctrl}
	mock.recorder = &MockIReviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReviewRepository) EXPECT() *MockIReviewRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReviewRepository) Create(arg0 context.Context, arg1 *domain.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIReviewRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReviewRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIReviewRepository) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIReviewRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIReviewRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockIReviewRepository) Get(arg0 context.Context, arg1 uuid.UUID) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIReviewRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIReviewRepository)(nil).Get), arg0, arg1)
}

// GetAllForReviewer mocks base method.
func (m *MockIReviewRepository) GetAllForReviewer(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]*domain.Review, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForReviewer", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Review)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllForReviewer indicates an expected call of GetAllForReviewer.
func (mr *MockIReviewRepositoryMockRecorder) GetAllForReviewer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForReviewer", reflect.TypeOf((*MockIReviewRepository)(nil).GetAllForReviewer), arg0, arg1, arg2)
}

// GetAllForTarget mocks base method.
func (m *MockIReviewRepository) GetAllForTarget(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]*domain.Review, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Review)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllForTarget indicates an expected call of GetAllForTarget.
func (mr *MockIReviewRepositoryMockRecorder) GetAllForTarget(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTarget", reflect.TypeOf((*MockIReviewRepository)(nil).GetAllForTarget), arg0, arg1, arg2)
}

// MockIReviewService is a mock of IReviewService interface.
type MockIReviewService struct {
	ctrl     *gomock.Controller
	recorder *MockIReviewServiceMockRecorder
}

// MockIReviewServiceMockRecorder is the mock recorder for MockIReviewService.
type MockIReviewServiceMockRecorder struct {
	mock *MockIReviewService
}

// NewMockIReviewService creates a new mock instance.
func NewMockIReviewService(ctrl *gomock.Controller) *MockIReviewService {
	mock := &MockIReviewService{ctrl: ctrl}
	mock.recorder = &MockIReviewServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReviewService) EXPECT() *MockIReviewServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReviewService) Create(arg0 context.Context, arg1 *domain.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIReviewServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReviewService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIReviewService) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIReviewServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIReviewService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockIReviewService) Get(arg0 context.Context, arg1 uuid.UUID) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIReviewServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIReviewService)(nil).Get), arg0, arg1)
}

// GetAllForReviewer mocks base method.
func (m *MockIReviewService) GetAllForReviewer(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]*domain.Review, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForReviewer", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Review)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllForReviewer indicates an expected call of GetAllForReviewer.
func (mr *MockIReviewServiceMockRecorder) GetAllForReviewer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForReviewer", reflect.TypeOf((*MockIReviewService)(nil).GetAllForReviewer), arg0, arg1, arg2)
}

// GetAllForTarget mocks base method.
func (m *MockIReviewService) GetAllForTarget(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]*domain.Review, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Review)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllForTarget indicates an expected call of GetAllForTarget.
func (mr *MockIReviewServiceMockRecorder) GetAllForTarget(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTarget", reflect.TypeOf((*MockIReviewService)(nil).GetAllForTarget), arg0, arg1, arg2)
}
